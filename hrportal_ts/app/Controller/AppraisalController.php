<?php

App::uses('AppController', 'Controller');

class AppraisalController extends AppController {

    var $name = 'Appraisal';
    var $uses = array('Appraisals', 'KraSlab', 'Company', 'MstCourseMasters', 'TrainingRequest', 'TrainingRegistrations', 'MstTrainingRequests', ' WfMstAppMapLvl', 'UserDetail', 'AppraisalFactorsMapping', 'myprofile', 'State', 'Appraisers', 'Designation', 'Appraisalratings', 'Appraisalslabs', 'Appraisalfactors', 'Appraisalcomments', 'Departments', 'Kras', 'Appraisalslabcategories', 'KpiMasters', 'KraMasters', 'KpiMapEmps', 'KraMapEmp', 'Target', 'KraKpiProcess');
    //var $uses = array('Appraisals', 'Company', 'MstCourseMasters', 'TrainingRequest', 'TrainingRegistrations', 'MstTrainingRequests', ' WfMstAppMapLvl', 'UserDetail', 'AppraisalFactorsMapping', 'myprofile', 'State', 'Appraisers', 'Designation', 'Appraisalratings', 'Appraisalslabs', 'Appraisalfactors', 'Appraisalcomments', 'Departments', 'Kras', 'Appraisalslabcategories');
    public $helpers = array('Html', 'Js', 'Form', 'Session', 'Userdetail', 'Leave', 'Common');
    public $components = array('Auth', 'Session', 'Email', 'Cookie', 'RequestHandler', 'EmpDetail', 'TrainingCmp');

    public function beforeFilter() {
        parent::beforeFilter();
        // $this->Auth->allow(array('travelapproval', 'travelapprovalmngr', 'approval', 'saveinfomation',
        //   'rejectvoucher', 'editvoucher', 'travelwf', 'travelwfsaveinfo', 'accountsearch', 'accountapproval',
        // 'editaccountvoucher'));
        $this->desig_code = $this->TrainingCmp->getDesignationCode($this->Auth->User('emp_code'));

        $this->designations = array('DIRECTOR' => 'PAR0000028', 'SR PROJECT MANAGER' => 'PAR0000027', 'MANAGER' => 'PAR0000029', 'HRMANAGER' => 'PAR0000036');
        $this->Auth->allow();
        $currentUser = $this->checkUser();
        $this->layout = 'employee-new';
    }

    public function index() {

        $this->layout = 'employee-new';
    }

    function prAppraiserListHtml() {

        App::import("Model", "Appraisals");
        $model = new Appraisals();

        $query = $model->find('list', array(
            'fields' => array('*'),
            'joins' => array
                (
                array
                    (
                    'table' => 'app_appraisers',
                    'alias' => 'appraiser',
                    'Type' => 'LEFT',
                    'conditions' => array('appraiser.request_id=Appraisals.id')
                )
            ),
            array
                (
                'table' => 'myprofile',
                'alais' => 'perdt',
                'type' => 'left',
                'conditions' => array('Appraisals.emp_code=perdt.emp_code and perdt.status not in (0)')
            )
        ));

        $conditions = array();
        $conditions = array('myprofile.status' => array('1'));

        if (!empty($this->data)) {
            $this->redirect($this->data['Appraisals'], null, true);
        }
        $conditions['Appraisals.ch_status !='] = 'AUTOGENERATED';
        if (!empty($this->passedArgs['startdate'])) {
            $conditions[] = "appraiser.dt_appraisal >= to_date('" . $this->passedArgs['startdate'] . "','YYYY-MM-DD')";
        }
        if (!empty($this->passedArgs['enddate'])) {
            $conditions[] = "appraiser.dt_appraisal <= to_date('" . $this->passedArgs['enddate'] . "','YYYY-MM-DD')";
        }
        if (!empty($this->passedArgs['vc_emp_name'])) {
            $conditions['perdt.emp_name LIKE'] = '%' . strtoupper($this->passedArgs['emp_name']) . '%';
        }
        if (!empty($this->passedArgs['ch_status'])) {
            if (strtoupper($this->passedArgs['ch_status']) == 'OPEN') {
                $conditions[] = "Appraisals.id IN (select b.request_id from app_appraisers b where b.id in (select aid from (select a.request_id, min(a.id) aid from app_appraisers a where a.dt_appraise is null group by a.request_id)) and b.emp_code_appraiser = '" . $this->Auth->User('emp_code') . "')";
                //$conditions[] = "Appraisals.id IN (select nu_request_id from (select * from (select vc_appraiser, nu_request_id, min(id) from hr_app_appraisers where dt_appraise is null group by vc_appraiser, nu_request_id) where vc_appraiser = '" . $this->Auth->User('vc_emp_id_makess') . "'))";
            } else {
                $conditions['Appraisals.ch_status LIKE'] = '%' . strtoupper($this->passedArgs['ch_status']) . '%';
            }
        }
        $conditions['emp_code_appraiser'] = $this->Auth->User('emp_code');
        $conditions[] = 'Appraisals.emp_code != appraisers.emp_code_appraiser';
        $conditions['Appraisals.ch_status !='] = 'AUTOGENERATED';


        $data = $this->paginate($query, $conditions);
        $app = array();
        foreach ($data as &$appraiser) {

            $current_appraiser = $this->Appraisers->find('all', array(
                'conditions' => array(
                    'Appraisers.request_id' => $appraiser['Appraisals']['id'],
                    'Appraisers.dt_appraise' => null
                ),
                'fields' => array('Appraisers.emp_code_appraiser', 'Appraisers.request_id'),
                'order' => 'Appraisers.id ASC'
            ));

            $sentBy = $this->Appraisers->find('first', array(
                'conditions' => array(
                    'Appraisers.id !=' => $current_appraiser[0]['Appraisers']['id'],
                    'Appraisers.request_id' => $appraiser['Appraisals']['id'],
                    'Appraisers.dt_appraise' => null
                ),
                'fields' => array('Appraisers.emp_code_appraiser'),
                'order' => 'Appraisers.id ASC'
            ));
            //$appraiser['Appraisers']['vc_appraiser'];

            $i = 0;
            foreach ($current_appraiser as $current_appraiser) {
                if ($current_appraiser['Appraisers']['emp_code_appraiser'] == $this->Auth->User('emp_code')) {
                    $appraiser['Appraisals']['ch_status'] = 'OPEN';
                }
                $i = $i + 1;
            }
            if ((trim($current_appraiser['Appraisals']['ch_status']) == 'REJECTED' || trim($current_appraiser['Appraisals']['ch_status']) == 'FORWARDED') && $sentBy['Appraisers']['emp_code_appraiser'] == $this->Auth->User('emp_code')) {
                $appraiser['Appraisals']['role'] = 'SENDER';
            }
        }
        $this->layout = 'employee-new';
        $this->set('data', $data);
    }

    function prAppraiseeListHtml() {
        try {

            $conditions = array();
            $conditions['Appraisals.emp_code'] = $this->Auth->User('emp_code');
            $conditions[0] = "Appraisals.ch_status != 'AUTOGENERATED'";
            $conditions[1] = "Appraisals.ch_status != 'ON HOLD'";

            if (!empty($this->data)) {
                $this->redirect($this->data['Appraisals'], null, true);
            }
            if (!empty($this->passedArgs['startdate'])) {
                $conditions[] .= "Appraisals.dt_appraisal >= to_date('" . $this->passedArgs['startdate'] . "','YYYY-MM-DD')";
            }
            if (!empty($this->passedArgs['enddate'])) {
                $conditions[] .= "Appraisals.dt_appraisal <= to_date('" . $this->passedArgs['enddate'] . "','YYYY-MM-DD')";
            }

            $data = $this->paginate($conditions);
            foreach ($data as &$appraiser) {
                $current_appraiser = $this->Appraisers->find('first', array(
                    'conditions' => array(
                        'Appraisers.request_id' => $appraiser['Appraisals']['id'],
                        'Appraisers.dt_appraise' => null
                    ),
                    'fields' => array('Appraisers.emp_code_appraiser'),
                    'order' => 'Appraisers.id ASC'
                ));

                //$appraiser['Appraisers']['vc_appraiser'];
                if ($current_appraiser['Appraisers']['emp_code_appraiser'] == $this->Auth->User('emp_code')) {
                    $appraiser['Appraisals']['ch_status'] = 'OPEN';
                }
            }

            $this->layout = 'employee-new';
            $this->set('data', $data);
        } catch (Exception $e) {
            
        }
    }

    function prHrListHtml() {
        try {

            $conditions = array();

            if (!empty($this->data)) {
                $this->redirect($this->data['Appraisals'], null, true);
            }
            $conditions['Appraisals.ch_status !='] = 'AUTOGENERATED';
            if (!empty($this->passedArgs['startdate'])) {
                $conditions[] = "Appraisals.dt_appraisal >= to_date('" . $this->passedArgs['startdate'] . "','YYYY-MM-DD')";
            }
            if (!empty($this->passedArgs['enddate'])) {
                $conditions[] = "Appraisals.dt_appraisal <= to_date('" . $this->passedArgs['enddate'] . "','YYYY-MM-DD')";
            }
            if (!empty($this->passedArgs['emp_name'])) {
                $conditions['MyProfile.emp_name LIKE'] = '%' . strtoupper($this->passedArgs['emp_name']) . '%';
            }
            if (!empty($this->passedArgs['vc_appraiser_name'])) {
                $appraisers = $this->MyProfile->find('list', array(
                    'conditions' => array(
                        'MyProfile.emp_name LIKE' => '%' . strtoupper($this->passedArgs['vc_appraiser_name']) . '%',
                    )
                ));
                $requests_reject = $this->Appraisers->query('SELECT Appraisers.id, Appraisers.emp_code_appraiser, Appraisers.request_id FROM app_appraisers Appraisers WHERE Appraisers.id IN (SELECT MIN(B.id) FROM app_appraisers B WHERE B.dt_appraise IS NULL GROUP BY B.request_id)');
                $requests_reject = Set::combine($requests_reject, '{n}.Appraisers.request_id', '{n}.Appraisers.emp_code_appraiser');
                $requests_reject = array_keys(array_intersect($requests_reject, $appraisers));
                $requests_reject = $this->Appraisals->find('list', array(
                    'conditions' => array(
                        'Appraisals.id' => $requests_reject + array(0),
                        'Appraisals.ch_status' => array('REJECTED', 'FORWARDED', 'APPRAISER'),
                    )
                ));

                $conditions['Appraisals.id'] = $requests_reject + array(0);
            }

            if (!empty($this->passedArgs['ch_status'])) {
                $conditions['Appraisals.ch_status LIKE'] = '%' . strtoupper($this->passedArgs['ch_status']) . '%';
            }
            $data = $this->paginate($conditions);

            $this->layout = 'employee-new';

            $this->set('data', $data);
        } catch (Exception $e) {
            
        }
    }

    function pr_optionlist_html() {
        $this->layout = 'employee-new';
        App::import("Model", "UserDetail");
        $model = new UserDetail();
        $employees = $model->find('list', array(
            'fields' => array('emp_code', 'user_name'),
            'order' => 'user_name asc'
        ));
        // print_r($employees);die;
        $this->set('data', $employees);
    }

    function prGenerateAddJson() {
        try {

            /**
             * ************************************************************************
             * INPUT authentication check, autorization check, validation check,
             * data purging, variable initialization
             * ************************************************************************
             */
            $count = $this->UserDetail->find('count', array(
                'conditions' => array(
                    'UserDetail.emp_code' => $this->data['employee'],
                )
            ));

            $hasPendingAppraisal = $this->Appraisals->find('count', array(
                'conditions' => array(
                    'Appraisals.ch_status NOT' => array('AUTOGENERATED', 'COMPLETE'),
                    'Appraisals.emp_code' => $this->data['employee'],
                )
            ));

            $isValid = ($count != 0) && ($hasPendingAppraisal == 0 );
            /**
             * ************************************************************************
             * PROCESS 
             * ************************************************************************
             */
            if ($isValid) {


                //--------------------------------------------------------------
                //FIND DEFAULT VALUES FROM PREVIOUS APPRAISALS
                //--------------------------------------------------------------
                //PRESENT SALARY
                //FROM AND TO DATE
                $to_date = date('Y-m-d');
                $from_date = date('Y-m-d', strtotime("-1 day"));
                $appraisal_date = date('Y-m-d', strtotime("+1 day", strtotime($to_date)));

                $previous_appraisal = $this->Appraisals->find('first', array(
                    'conditions' => array(
                        'Appraisals.emp_code' => $this->data['employee'],
                    ),
                    'order' => 'Appraisals.dt_todate DESC'
                ));

                if ($previous_appraisal) {
                    if (count($previous_appraisal) >= 2)
                        $appraisal_type = "1";
                    $from_date = date('Y-m-d', strtotime("+1 day", strtotime($previous_appraisal['Appraisals']['dt_todate'])));
                    if (strtotime($to_date) <= strtotime($from_date)) {
                        $to_date = date('Y-m-d', strtotime("+1 day", strtotime($from_date)));
                        $appraisal_date = date('Y-m-d', strtotime("+2 day", strtotime($from_date)));
                    }
                } else {
                    $appraisal_type = "0";

                    $personal_details = $this->myprofile->find('first', array(
                        'conditions' => array('myprofile.emp_code' => $this->data['employee'])
                    ));
                    $from_date = date('Y-m-d', strtotime($personal_details['myprofile']['join_date']));
                }
                //print_r($from_date);die;
                $presentsalary = 0;
                $data = $this->MyProfile->find('first', array(
                    'conditions' => array('MyProfile.emp_code' => $this->data['employee']),
                    'fields' => array(
                        "sysdate() AS dt_request",
                        "'" . $from_date . "' AS dt_fromDate",
                        "'" . $to_date . "' AS dt_toDate",
                        'emp_code',
                        "'ON HOLD' AS ch_status",
                        "'" . $appraisal_date . "' AS dt_appraisal",
                        "'" . $appraisal_type . "' AS app_type",
                        'desg_code',
                        "'' AS edu_code",
                        'dept_code',
                        'location_code AS locat_code',
                        "join_date  AS dt_join",
                        "id as myprofile_id",
                        "DATEDIFF(SYSDATE(),myprofile.join_date)/30 as ess_exp",
                    )
                ));

                $dept_code = $data['MyProfile']['dept_code'];

                $dcode = $this->Departments->find('first', array(
                    'conditions' => array('Departments.dept_code' => $dept_code),
                    'fields' => array("id ")
                ));


                $desc_code = $data['MyProfile']['desg_code'];
                $save = array();
                $save = array_merge($data['MyProfile'], $data[0]);
                $save['slab_category_id'] = 1;
                $save['amt_lst_inc'] = 0;
                $save['tot_expr'] = 0;
                $save['desc_code'] = $desc_code;
                $save['departments_id'] = $dcode['Departments']['id'];
                $save['review_degree'] = $this->data['review'];

                $this->Appraisals->create();

                if ($this->Appraisals->save($save)) {
                    unset($save);

                    $this->Session->setFlash('Appraisal Saved Successfully', false, array('class' => 'flash flash_error'));
                    return $this->redirect(
                                    array('controller' => 'Appraisal', 'action' => 'prHrListHtml')
                    );
                } else {
                    if ($hasPendingAppraisal != 0)
                        $this->Session->setFlash('Pending appraisal exists', false, array('class' => 'flash flash_error'));
                    return $this->redirect(
                                    array('controller' => 'Appraisal', 'action' => 'prHrListHtml')
                    );
                }
            } else {
                $this->Session->setFlash('Bad data received or Appraisal doesnt exist.', false, array('class' => 'flash flash_error'));
                return $this->redirect(
                                array('controller' => 'Appraisal', 'action' => 'prHrListHtml')
                );
            }
            $this->layout = 'employee-new';
        } catch (Exception $e) {
            
        }
    }

    function start($id) {

        $count = $this->Appraisals->find('count', array(
            'conditions' => array(
                'Appraisals.id' => $id,
                'Appraisals.ch_status' => 'ON HOLD'
            )
        ));
        if ($count == 0) {
            $this->redirect("/pages/permissionDenied");
        }
        $this->layout = 'employee-new';
        $appraisalRequest = $this->Appraisals->find('first', array(
            'conditions' => array('Appraisals.id' => $id)
        ));


        $appraisalRequest_last_five = $this->Appraisals->find('all', array(
            'conditions' => array(
                'not' => array(
                    'Appraisals.id' => $id
                ),
                'Appraisals.emp_code' => $appraisalRequest['Appraisals']['emp_code']
            ),
            'order' => 'Appraisals.dt_toDate DESC',
            'limit' => '5'
        ));

        $departments = $this->Departments->find('list', array(
            'conditions' => array('Departments.comp_code' => '01'),
            'fields' => array('Departments.dept_code', 'Departments.dept_name')
        ));

        $designations = $this->Designation->find('list', array(
            'conditions' => array('Designation.comp_code' => '01'),
            'fields' => array('Designation.desg_code', 'Designation.desc')
        ));

        $locations = $this->State->find('list', array(
            'conditions' => array('State.country_id' => '101'),
            'fields' => array('State.id', 'State.state_name')
        ));

        App::import("Model", "UserDetail");
        $model = new UserDetail();
        $employees = $model->find('list', array(
            'fields' => array('emp_code', 'user_name'),
            'order' => 'user_name asc'
        ));


        $performance = Array(
            '0' => 'Not Selected',
            '1' => 'Below Average',
            '2' => 'Average',
            '3' => 'Good',
            '4' => 'Very Good',
            '5' => 'Excellent'
        );
        $subordinate_count = $this->MyProfile->find('count', array(
            'conditions' => array(
                'MyProfile.desg_code' => 'PAR0000027',
                'MyProfile.emp_code' => $appraisalRequest['Appraisals']['emp_code'],
            )
        ));
        $categories = $this->Appraisalslabcategories->find('list');

        $employeeType = 'STAFF';
        if ($subordinate_count > 0)
            $employeeType = 'MANAGER';
        $this->set(compact('employeeType', 'performance', 'appraisalRequest_last_five', 'appraisalRequest', 'departments', 'designations', 'locations', 'educations', 'employees', 'categories'));
    }

    function prStartEditHtml() {


        try {

            $this->Appraisals->id = $this->data['Appraisals']['id'];

            if ($this->Appraisals->id) {
                $this->Appraisals->saveField('ch_status', 'APPRAISEE');
                $this->Appraisals->saveField('app_Code', $this->data['Appraisers']['emp_code_appraiser']);
            }

            $this->Appraisals->id = $this->data['Appraisals']['id'];
            $save = array();
            $save['request_id'] = $this->data['Appraisals']['id'];
            $save['emp_code_appraiser'] = $this->data['Appraisals']['emp_code'];
            $myprofile_id = $this->MyProfile->find('first', array(
                'conditions' => array('MyProfile.emp_code' => $this->data['Appraisals']['emp_code']),
                'fields' => array("id ")
            ));

            $save['myprofile_id'] = $myprofile_id['MyProfile']['id'];
            if ($this->Appraisers->save($save)) {
                unset($save);
            }

            // factors created for appraisee
            $factors = $this->AppraisalFactorsMapping->find('all', array(
                'conditions' => array(
                    'AppraisalFactorsMapping.myprofile_id' => $myprofile_id['MyProfile']['id']
                )
            ));


            $comment = array(
                'appraiser_id' => $this->Appraisers->id,
                'performance' => '0'
            );
            if ($comment) {

                $this->Appraisalcomments->save($comment);
            }
            foreach ($factors as $factor) {
                $factor = $factor['AppraisalFactorsMapping'];
                $factor['appraiser_id'] = $this->Appraisers->id;
                $factor['factor_id'] = $factor['app_factors_id'];
                $factor['rating_id'] = '0';

                $this->Appraisalratings->create();
                $this->Appraisalratings->save($factor);
            }



            /*             * **************if 360 review than create new peer and peer comment and peer rating******************************* */
            if (!empty($this->data['peer'])) {

                if (count($this->data['peer']) < 2) {

                    $newsave = array();
                    $newsave['request_id'] = $this->Appraisals->id;
                    $newsave['emp_code_appraiser'] = $this->data['peer'][0];
                    $newsave['peer_appraiser'] = 1;
                    $apprasier_myprofileid = $this->MyProfile->find('first', array(
                        'conditions' => array('MyProfile.emp_code' => $this->data['peer'][0]),
                        'fields' => array("id ")
                    ));
                    $newsave['myprofile_id'] = $apprasier_myprofileid['MyProfile']['id'];

                    $this->Appraisers->create();
                    if ($this->Appraisers->save($newsave)) {
                        unset($newsave);
                        $comment = array(
                            'appraiser_id' => $this->Appraisers->id,
                            'performance' => '0'
                        );
                        if ($comment) {
                            $this->Appraisalcomments->create();
                            $this->Appraisalcomments->save($comment);
                        }
                        $factors = $this->AppraisalFactorsMapping->find('all', array(
                            'conditions' => array(
                                'AppraisalFactorsMapping.myprofile_id' => $myprofile_id['MyProfile']['id']
                            )
                        ));
                        foreach ($factors as $factor) {
                            $factor1 = $factor['AppraisalFactorsMapping'];
                            $factor['appraiser_id'] = $this->Appraisers->id;
                            $factor['factor_id'] = $factor1['app_factors_id'];
                            $factor['rating_id'] = '0';
                            $this->Appraisalratings->create();
                            if ($this->Appraisalratings->save($factor)) {
                                unset($factor);
                            }
                        }
                    }
                } else {
                    foreach ($this->data['peer'] as $k => $val) {
                        $newsave = array();
                        $newsave['request_id'] = $this->Appraisals->id;
                        $newsave['emp_code_appraiser'] = $val;
                        $newsave['peer_appraiser'] = 1;
                        $apprasier_myprofileid = $this->MyProfile->find('first', array(
                            'conditions' => array('MyProfile.emp_code' => $val),
                            'fields' => array("id ")
                        ));
                        $newsave['myprofile_id'] = $apprasier_myprofileid['MyProfile']['id'];
                        $this->Appraisers->create();
                        if ($this->Appraisers->save($newsave)) {
                            unset($newsave);
                            $comment = array(
                                'appraiser_id' => $this->Appraisers->id,
                                'performance' => '0'
                            );
                            if ($comment) {
                                $this->Appraisalcomments->create();
                                $this->Appraisalcomments->save($comment);
                            }
                            $factors = $this->AppraisalFactorsMapping->find('all', array(
                                'conditions' => array(
                                    'AppraisalFactorsMapping.myprofile_id' => $myprofile_id['MyProfile']['id']
                                )
                            ));

                            foreach ($factors as $factor) {
                                $factor1 = $factor['AppraisalFactorsMapping'];
                                $factor['appraiser_id'] = $this->Appraisers->id;
                                $factor['factor_id'] = $factor1['app_factors_id'];
                                $factor['rating_id'] = '0';
                                $this->Appraisalratings->create();
                                $this->Appraisalratings->save($factor);
                            }
                        }
                    }
                }
            }

            /*             * *******************************************peer entry ends here********************************************************************** */
            //==================================================================
            //create manager
            //==================================================================
            $newsave = array();
            $newsave['request_id'] = $this->Appraisals->id;
            $newsave['emp_code_appraiser'] = $this->data['Appraisers']['emp_code_appraiser'];
            $apprasier_myprofileid = $this->MyProfile->find('first', array(
                'conditions' => array('MyProfile.emp_code' => $this->data['Appraisers']['emp_code_appraiser']),
                'fields' => array("id ")
            ));
            $newsave['myprofile_id'] = $apprasier_myprofileid['MyProfile']['id'];

            $this->Appraisers->create();
            if ($this->Appraisers->save($newsave)) {
                unset($newsave);
            }
            // factors created for forwarded employee
            $factors = $this->AppraisalFactorsMapping->find('all', array(
                'conditions' => array(
                    'AppraisalFactorsMapping.myprofile_id' => $myprofile_id['MyProfile']['id'])));

            $comment = array(
                'appraiser_id' => $this->Appraisers->id,
                'nu_performance' => '0'
            );
            if ($comment) {
                $this->Appraisalcomments->create();
                $this->Appraisalcomments->save($comment);
            }

            foreach ($factors as $factormanager) {
                $factormanager1 = $factormanager['AppraisalFactorsMapping'];

                $factormanager['appraiser_id'] = $this->Appraisers->id;
                $factormanager['factor_id'] = $factormanager1['app_factors_id'];
                $factormanager['rating_id'] = '0';

                $this->Appraisalratings->create();
                $this->Appraisalratings->save($factormanager);
            }

            $this->autoRender = '';
            $this->Session->setFlash('Appraisal started.', false, array('class' => 'flash flash_error'));
            return $this->redirect(
                            array('controller' => 'Appraisal', 'action' => 'prAppraiserListHtml')
            );
        } catch (Exception $e) {
            
        }
    }

    protected function __dateDifference($date_1, $date_2, $differenceFormat = '%a') {
        $datetime1 = date_create($date_1);
        $datetime2 = date_create($date_2);
        $interval = date_diff($datetime1, $datetime2);
        return $interval->format($differenceFormat);
    }

    protected function __diff_in_weeks_and_days($from, $to) {
        $day = 24 * 3600;
        $from = strtotime($from);
        $to = strtotime($to) + $day;
        $diff = abs($to - $from);
        $weeks = floor($diff / $day / 7);
        $days = $diff / $day - $weeks * 7;
        $out = array();
        if ($weeks)
            $out[] = "$weeks" . ($weeks > 1 ? '' : '');
        if ($days)
            $out[] = "$days" . ($days > 1 ? '' : '');

        return $out[0];
    }

    protected function __diff_in_month($from, $to) {
        $d1 = strtotime("$from");
        $d2 = strtotime("$to");
        $min_date = min($d1, $d2);
        $max_date = max($d1, $d2);
        $i = 0;
        while (($min_date = strtotime("+1 MONTH", $min_date)) <= $max_date) {
            $i++;
        }
        return $i;
    }

    protected function __calcAssessmentTab($target, $from, $to) {
        $value = '';
        if ($target == 1) {
            $weak = $this->__diff_in_weeks_and_days($to, $from);
            $value = $weak;
        } elseif ($target == 2) {
            $month = $this->__diff_in_month($from, $to);
            $value = $month;
            if ($month < 3) {
                $value = $month;
            } else {
                $value = $month / 3;
            }
        } elseif ($target == 3) {
            $month = $this->__diff_in_month($from, $to);
            $value = $month;
            if ($month < 6) {
                $value = $month;
            } else {
                $value = $month / 6;
            }
        } elseif ($target == 4) {
            $year = $this->__dateDifference($to, $from);
            $value = $year;
        }
        return $value;
    }

    protected function __kraDetails() {
        App::import('Helper', 'Common');
        $commonHelper = new CommonHelper();
        $param = explode("&", $emp_code);
        $appraisal_emp_code = base64_decode('NDky');
        $appraisal_emp_code_date = date("Y-m-d", 1452898800);
        $myprofile = $this->MyProfile->find('first', array(
            'conditions' => array(
                'emp_code' => $appraisal_emp_code)
        ));
        $kralist = $this->KpiMapEmps->find('all', array(
            'conditions' => array(
                'myprofile_id' => $appraisal_emp_code,
                'status' => 1,
                'from_date' => $appraisal_emp_code_date
            ),
            'fields' => array('KpiMapEmps.*'),
            'order' => 'id DESC'
        ));
        $kraProcesslist = $this->KpiMapEmps->find('all', array(
            'joins' => array(
                array(
                    'table' => 'kra_kpi_process',
                    'alias' => 'KraKpiProcess',
                    'type' => 'INNER',
                    'conditions' => array(
                        'KraKpiProcess.kra_masters_id = KpiMapEmps.kra_masters_id',
                        'KraKpiProcess.kpi_masters_id = KpiMapEmps.kpi_masters_id',
                        'KraKpiProcess.kpi_map_emps_id = KpiMapEmps.id'
                    )
                )
            ),
            'conditions' => array(
                'KraKpiProcess.kra_kpi_assign_user' => $appraisal_emp_code,
                'KpiMapEmps.status' => 1,
                'KpiMapEmps.from_date' => $appraisal_emp_code_date
            ),
            'fields' => array('KraKpiProcess.*'),
            'order' => 'KraKpiProcess.id ASC'
        ));
        $kraProcessCount = $this->KpiMapEmps->find('all', array(
            'joins' => array(
                array(
                    'table' => 'kra_kpi_process',
                    'alias' => 'KraKpiProcess',
                    'type' => 'INNER',
                    'conditions' => array(
                        'KraKpiProcess.kra_masters_id = KpiMapEmps.kra_masters_id',
                        'KraKpiProcess.kpi_masters_id = KpiMapEmps.kpi_masters_id',
                        'KraKpiProcess.kpi_map_emps_id = KpiMapEmps.id'
                    )
                )
            ),
            'conditions' => array(
                'KraKpiProcess.kra_kpi_assign_user' => $appraisal_emp_code,
                'KpiMapEmps.status' => 1,
                'KpiMapEmps.from_date' => $appraisal_emp_code_date
            ),
            'fields' => array('KraKpiProcess.id'),
            'order' => 'KraKpiProcess.id ASC',
            'group' => array('KraKpiProcess.myprofile_id'),
        ));
        $this->set('kraProcessCount', $kraProcessCount);
        $this->set('kraProcesslist', $kraProcesslist);
        $this->set('kraList', $kralist);
        $this->set('emp_codes', $this->Auth->User('emp_code'));
        $this->set('myprofile', $myprofile);
        $this->set('emp_date', $appraisal_emp_code_date);
    }

    function edit($id) {
        try {
            // kra details for managers
            if (in_array($this->desig_code, $this->designations)) {

                //$kra = $this->__kraDetails();
                //die('herer');
//                if (!empty($kra)) {
//                    foreach ($kra as $value) {
//                        $tot+=$value['Score'];
//                    }
//                    //$score = ($targetAchived / $weightage * 100);
//                    //return number_format((float) $score, 2, '.', '') . "%";
//                }
                $this->set('kra', $kra);
                $score = number_format((float) ($tot / 2), 2, '.', '');
                $finalscore = ceil($score);
                $kraslab = $this->KraSlab->query("SELECT * FROM `kra_slabs` WHERE $finalscore >= `kra_rating_min` and $finalscore <= `kra_rating_max`");

                $this->set('kraslab', $kraslab[0]['kra_slabs']['amt_inc']);
                $this->set('score', number_format((float) ($tot / 2), 2, '.', ''));
            }
            // kra details for managers ends here
            //Redirect if id does not exist
            $count = $this->Appraisals->find('count', array(
                'conditions' => array(
                    'Appraisals.id' => $id,
                    'Appraisals.ch_status !=' => 'ON HOLD'
                ),
                
            ));
           
            if ($count == 0) {
                $this->redirect("/pages/permissionDenied");
            }

            $appraisalRequest = $this->Appraisals->find('first', array(
                'conditions' => array('Appraisals.id' => $id)
            ));
          
            
            $slabs = $this->Appraisalslabs->find('list', array(
                'conditions' => array(
                    'Appraisalslabs.desg_code' => $appraisalRequest['Appraisals']['desc_code'],
                    'Appraisalslabs.dept_code' => $appraisalRequest['Appraisals']['dept_code'],
                    'Appraisalslabs.slab_category_id' => $appraisalRequest['Appraisals']['slab_category_id'],
                ),
                'fields' => array(
                    'Appraisalslabs.rating_id', 'Appraisalslabs.amt_inc'
                )
            ));
         
            $categories = $this->Appraisalslabcategories->find('list');

            $appraisalRequest_last_five = $this->Appraisals->find('all', array(
                'conditions' => array(
                    'not' => array(
                        'Appraisals.id' => $id
                    ),
                    'Appraisals.emp_code' => $appraisalRequest['Appraisals']['emp_code']
                ),
                'order' => 'Appraisals.dt_toDate DESC',
                'limit' => '5'
            ));

            $employees = $this->MyProfile->find('list', array(
                'fields' => array('MyProfile.emp_code', 'MyProfile.emp_firstname'),
                'order' => 'MyProfile.emp_firstname asc'
            ));

            $periods = $this->Appraisals->find('all', array(
                'conditions' => array('Appraisals.emp_code' => $appraisalRequest['Appraisals']['emp_code']),
                'fields' => array(
                    "*"
                ),
                'order' => 'Appraisals.dt_toDate DESC'
            ));

            $performances = Array(
                '0' => 'Not Selected',
                '1' => 'Below Average',
                '2' => 'Average',
                '3' => 'Good',
                '4' => 'Very Good',
                '5' => 'Excellent'
            );
            if ($appraisalRequest['Appraisals']['review_degree'] == 1) {
                $current_appraiser = $this->Appraisers->find('all', array(
                    'conditions' => array(
                        'Appraisers.request_id' => $id,
                        'Appraisers.dt_appraise' => null
                    ),
                    'fields' => array('Appraisers.emp_code_appraiser'),
                    'order' => 'Appraisers.id ASC'
                ));
            } else {
                $current_appraiser = $this->Appraisers->find('first', array(
                    'conditions' => array(
                        'Appraisers.request_id' => $id,
                        'Appraisers.dt_appraise' => null
                    ),
                    'fields' => array('Appraisers.emp_code_appraiser'),
                    'order' => 'Appraisers.id ASC'
                ));
            }
            /// print_r($current_appraiser);die;
//            $appraisee = array();
//            foreach($appraisalRequest['Appraisers'] as $appraisers){
//                $appraisee[] = $appraisers['emp_code_appraiser'];
//            }
//            print_r($appraisee);die;
//            $educations = $this->Structures->find('list', array(
//                'conditions' => array('Structures.vc_struct_code LIKE' => 'F%'),
//                'fields' => array('Structures.vc_struct_code', 'Structures.vc_description')
//            ));
            $isHR = (trim($appraisalRequest['Appraisals']['ch_status']) == 'HR');

            $isAppraisee = ($this->Auth->User('emp_code') == $appraisalRequest['Appraisals']['emp_code']);
            if ($appraisalRequest['Appraisals']['review_degree'] == 1) {
                $emp_code = $appraisalRequest['Appraisals']['emp_code'];
                App::import("Model", 'MyProfile');
                $modelemp = new MyProfile();
                $peerlist = $modelemp->find('list', array(
                    'fields' => array('MyProfile.emp_code', 'MyProfile.emp_firstname'),
                    'conditions' => array('MyProfile.desg_code' => $appraisalRequest['Appraisals']['desc_code'], "MyProfile.emp_code NOT IN ($emp_code)")
                ));
               
                $this->set('peerlist', $peerlist);
                $isPeer = 0;
                foreach ($peerlist as $k => $val) {
                    if ($this->Auth->User('emp_code') == $k) {
                        $isPeer = 1;
                        $isPeerId = $this->Auth->User('emp_code');
                    }
                }
            } else {
                $isPeer = 0;
            }
            
            $isForwarded = (trim($appraisalRequest['Appraisals']['ch_status']) == 'FORWARDED');
            $isRejected = (trim($appraisalRequest['Appraisals']['ch_status']) == 'REJECTED');
            $isImmediateAppraiser = ($appraisalRequest['Appraisals']['app_Code'] == $this->Auth->User('emp_code'));
            $isFinalAppraiser = (parent::check('Appraisal/isFinalAppraiser'));
            $isHRAppraiser = (parent::check('Appraisal/prHrListHtml'));
            $isComplete = (trim($appraisalRequest['Appraisals']['ch_status']) == 'COMPLETE');
            if ($appraisalRequest['Appraisals']['review_degree'] == 1) {
                foreach ($current_appraiser as $current_appraiser) {
                    if ($current_appraiser['Appraisers']['emp_code_appraiser'] == $this->Auth->User('emp_code')) {
                        $isCurrentAppraiser = 1;
                    }
                }
            } else {
                $isCurrentAppraiser = ($current_appraiser['Appraisers']['emp_code_appraiser'] == $this->Auth->User('emp_code'));
            }
            
            $sentBy = '';
            if ($isRejected || $isForwarded) {
                $sentBy = $this->Appraisers->find('first', array(
                    'conditions' => array(
                        'Appraisers.id !=' => $current_appraiser['Appraisers']['id'],
                        'Appraisers.request_id' => $id,
                        'Appraisers.dt_appraise' => null
                    ),
                    'fields' => array('Appraisers.emp_code_appraiser'),
                    'order' => 'Appraisers.id ASC'
                ));
                $sentBy = $sentBy['MyProfile']['emp_firstName'];
            }
            /**
             * ************************************************************************
             * OUTPUT set output header, variable destruction, set layout, set view 
             * ************************************************************************
             */
            $this->layout = 'employee-new';
            if ($isHR) {
                if (!$isHRAppraiser)
                    $this->redirect("/pages/permissionDenied");
            }else {
                if (!$isCurrentAppraiser)
                    $this->redirect("/pages/permissionDenied");
            }

            $this->set(compact('slabs', 'sentBy', 'isHRAppraiser', 'isPeer', 'isPeerId', 'isRejected', 'isHR', 'isImmediateAppraiser', 'appraisalRequest_last_five', 'periods', 'isComplete', 'isFinalAppraiser', 'isForwarded', 'isAppraisee', 'performances', 'id', 'appraisalRequest', 'employees', 'educations', 'categories'));

            /*             * ***************************** SOC OF TRAINING MODULE  *********************************** */

            if ($id) {

                $courselisting = $this->MstCourseMasters->find('list', array(
                    'fields' => array(
                        'MstCourseMasters.id',
                        'MstCourseMasters.course_name',
                    ),
                    'conditions' => array(
                        'MstCourseMasters.course_status' => 'Y'
                    ),
                    'order' => array('MstCourseMasters.course_name ASC')
                ));

                $trainData = $this->TrainingRequest->find('first');
                $this->set('courselisting', $courselisting);
                $this->set('trainData', $trainData);

                /*                 * *************************************************************Start Module******************************************************** */

                App::import('Helper', 'Common');
                $commonHelper = new CommonHelper();
                $appraisal_emp_code = $appraisalRequest['Appraisals']['emp_code'];
                
                $kraAppraisalDate = $this->KraMapEmp->find('first', array(
                    'conditions' => array(
                        'myprofile_id' => $appraisal_emp_code,
                        'status' => 1
                    ),
                    'fields' => array('KraMapEmp.from_date'),
                    'order' => 'id DESC',
                    'limit' => 1,
                ));
                $appraisal_emp_code_date = $kraAppraisalDate['KraMapEmp']['from_date'];
                $myprofiles = $this->MyProfile->find('first', array(
                    'conditions' => array(
                        'emp_code' => $appraisal_emp_code)
                ));
                $kralist = $this->KpiMapEmps->find('all', array(
                    'conditions' => array(
                        'myprofile_id' => $appraisal_emp_code,
                        'status' => 1,
                        'from_date' => $appraisal_emp_code_date
                    ),
                    'fields' => array('KpiMapEmps.*'),
                    'order' => 'id DESC'
                ));
                $krlist = $this->KpiMapEmps->find('all', array(
                    'joins' => array(
                        array(
                            'table' => 'kra_masters',
                            'alias' => 'KraMasters',
                            'type' => 'INNER',
                            'conditions' => array(
                                'KraMasters.id = KpiMapEmps.kra_masters_id'
                            )
                        )
                    ),
                    'conditions' => array(
                        'KpiMapEmps.myprofile_id' => $appraisal_emp_code,
                        'KpiMapEmps.status' => 1,
                        'KpiMapEmps.from_date' => $appraisal_emp_code_date,
                        'KraMasters.groups' => 'kra'
                    ),
                    'fields' => array('KpiMapEmps.*'),
                    'order' => 'id DESC'
                ));
                $complist = $this->KpiMapEmps->find('all', array(
                    'joins' => array(
                        array(
                            'table' => 'kra_masters',
                            'alias' => 'KraMasters',
                            'type' => 'INNER',
                            'conditions' => array(
                                'KraMasters.id = KpiMapEmps.kra_masters_id'
                            )
                        )
                    ),
                    'conditions' => array(
                        'KpiMapEmps.myprofile_id' => $appraisal_emp_code,
                        'KpiMapEmps.status' => 1,
                        'KpiMapEmps.from_date' => $appraisal_emp_code_date,
                        'KraMasters.groups' => 'competency',
                    ),
                    'fields' => array('KpiMapEmps.*'),
                    'order' => 'id DESC'
                ));
                $kraProcesslist = $this->KpiMapEmps->find('all', array(
                    'joins' => array(
                        array(
                            'table' => 'kra_kpi_process',
                            'alias' => 'KraKpiProcess',
                            'type' => 'INNER',
                            'conditions' => array(
                                'KraKpiProcess.kra_masters_id = KpiMapEmps.kra_masters_id',
                                'KraKpiProcess.kpi_masters_id = KpiMapEmps.kpi_masters_id',
                                'KraKpiProcess.kpi_map_emps_id = KpiMapEmps.id'
                            )
                        )
                    ),
                    'conditions' => array(
                        'KraKpiProcess.kra_kpi_assign_user' => $appraisal_emp_code,
                        'KpiMapEmps.status' => 1,
                        'KpiMapEmps.from_date' => $appraisal_emp_code_date
                    ),
                    'fields' => array('KraKpiProcess.*'),
                    'order' => 'KraKpiProcess.id ASC'
                ));
                $kraProcessCount = $this->KpiMapEmps->find('all', array(
                    'joins' => array(
                        array(
                            'table' => 'kra_kpi_process',
                            'alias' => 'KraKpiProcess',
                            'type' => 'INNER',
                            'conditions' => array(
                                'KraKpiProcess.kra_masters_id = KpiMapEmps.kra_masters_id',
                                'KraKpiProcess.kpi_masters_id = KpiMapEmps.kpi_masters_id',
                                'KraKpiProcess.kpi_map_emps_id = KpiMapEmps.id'
                            )
                        )
                    ),
                    'conditions' => array(
                        'KraKpiProcess.kra_kpi_assign_user' => $appraisal_emp_code,
                        'KpiMapEmps.status' => 1,
                        'KpiMapEmps.from_date' => $appraisal_emp_code_date
                    ),
                    'fields' => array('KraKpiProcess.id'),
                    'order' => 'KraKpiProcess.id ASC',
                    'group' => array('KraKpiProcess.myprofile_id'),
                ));
                /* @var $kraListValue type */
                foreach ($krlist as $kraListValue) {
                    $kraUnitslists = $commonHelper->getEmployeesUnitsByKra($kraListValue['KpiMapEmps']['kra_masters_id'], $kraListValue['KpiMapEmps']['kpi_masters_id'], $kraListValue['KpiMapEmps']['myprofile_id'], $kraListValue['KpiMapEmps']['id']);
                    /* @var $kraUnitslists type */
                    if (!empty($kraUnitslists)) {
                        foreach ($kraUnitslists as $kraUnitslist) {
                            $tsum+=$kraUnitslist['kra_kpi_process']['units'];
                        }
                        $totalAvgSum+=number_format($tsum / count($kraUnitslists), 2, '.', '');
                        unset($tsum);
                    }
                }
                $this->set('kraScore', number_format($totalAvgSum / count($krlist), 2, '.', ''));
                $this->set('kraScorePos', $commonHelper->empKraKpiSlab(number_format($totalAvgSum / count($krlist), 2, '.', '')));
                $this->set('kraScoreIncAmt', $commonHelper->empKraKpiIncAmt(number_format($totalAvgSum / count($krlist), 2, '.', '')));
                $this->set('kraProcessCount', $kraProcessCount);
                $this->set('kraProcesslist', $kraProcesslist);
                $this->set('kraList', $kralist);
                $this->set('krlist', $krlist);
                $this->set('complist', $complist);
                $this->set('myprofiles', $myprofiles);
                $this->set('emp_date', $appraisal_emp_code_date);

                /*                 * ****************************************************Ends Module******************************************************** */
            }

            /*             * ***************************** EOC OF TRAINING MODULE  *********************************** */
        } catch (Exception $e) {
            
        }
    }

    function appriasal_training_requests() {
        $this->layout = '';
        $response = new stdClass();
        if ($this->data['TrainingRequest']['topic_type'] == 'N') {

            $trainings = $this->data['TrainingRequest']['new_training_name'];
        } else {
            foreach ($this->data['TrainingRequest']['existing_training_name'] as $trn) {
                $trainings .= trim($trn);
                $trainings .= ",";
            }
        }

        $insData = array();

        $insData['TrainingRequest'] = Array(
            'appraisal_id' => $this->data['TrainingRequest']['appraisal_id'],
            'identified_from' => $this->data['TrainingRequest']['appriasal_id'],
            'topic_type' => $this->data['TrainingRequest']['topic_type'],
            'training' => $trainings,
            'identified_by' => $this->data['TrainingRequest']['identified_by'],
            'trainee_code' => $this->data['TrainingRequest']['trainee_code']);

        $this->TrainingRequest->create();
        if ($this->TrainingRequest->save($insData)) {
            $response->message = "Training Registered sucecessfully.";
            $this->Session->setFlash($response->message, false);
            $response->status = 1;
            $this->autoRender = '';
            header("HTTP/1.0 200 OK");
            header('Content-type: text/json; charset=utf-8');
            header("Cache-Control: no-cache, must-revalidate");
            header("Expires: Mon, 21 Oct 2011 10:30:00 IST");
            header("Pragma: no-cache");
            echo json_encode($response);
        }
    }

    function prSheetEditJson() {

        try {

            $response = new stdClass();
            $email_error = '';

            $isValid = true;
            $currentAppraisal = $this->Appraisals->read(array('emp_code', 'ch_status', 'desc_code', 'dept_code', 'emp_type', 'app_code', 'slab_category_id', 'myprofile_id'), $this->data['id']);
            //validate data received
            if (!empty($this->data)) {
                $count = $this->Appraisals->find('count', array(
                    'condition' => array(
                        'Appraisals.id' => $this->data['id'],
                    )
                ));
                $isValid = ($count != 0);
            } else {
                $isValid = false;
            }

            if ($currentAppraisal['Appraisals']['ch_status'] != 'HR')
                if ($currentAppraisal['Appraisals']['app_Code'] == $this->Auth->User('emp_code'))
                    if ($currentAppraisal['Appraisals']['emp_type'] == 'MANAGER') {
                        foreach ($this->data['Kras'] as $kra)
                            if (!isset($kra['id'])) {
                                $hasNewKra = true;
                            }
                        $isValid = ($isValid && $hasNewKra);
                    }
            /**
             * ************************************************************************
             * PROCESS 
             * ************************************************************************
             */
            //Save Appraiser
            //Add Ratings
            //Add Comments
            if ($isValid) {
                //Initialize all check variables
                // $isFinalAppraiser = (parent::check('Appraisal/isFinalAppraiser'));
                $isHRAppraiser = (parent::check('Appraisal/prHrListHtml'));
                $isAppraisee = ($this->Auth->User('emp_code') == $currentAppraisal['Appraisals']['emp_code']);
                $status = $currentAppraisal['Appraisals']['ch_status'];
                $isHR = (trim($status) == 'HR');
                $isForwarded = (trim($status) == 'FORWARDED');
                $isRejected = (trim($status) == 'REJECTED');
                //Start the process
                if (!$isHR) {
                    $temp = $this->data;

                    $temp['Appraisers']['dt_appraise'] = date('Y-m-d');
                    $this->Appraisers->save($temp);
                    $old_appraiser_id = $this->Appraisers->id;
                    $this->Appraisalratings->saveAll($this->data['Appraisalratings']);
                    $this->Appraisalcomments->save($this->data);

                    $prior_manager = $this->Appraisers->find('count', array(
                        'conditions' => array(
                            'Appraisers.request_id' => $this->data['id'],
                            'Appraisers.dt_appraise' => null
                        )
                    ));



                    if (!$prior_manager) {

                        //==================================================================
                        //Create New Appraiser which is the manager of the current user
                        //==================================================================
                        //New Appraiser Record
                        //$manager = $this->Employees->findByVcEmpIdMakess($this->Auth->User('vc_emp_id_makess'));
                        $newsave = array();

                        $newsave['Appraisers']['request_id'] = $this->data['id'];
                        $newsave['Appraisers']['dt_appraise'] = null;
                        $newsave['Appraisers']['emp_code_appraiser'] = $this->request->data['Appraisals']['forwardlvl'];
                        $myprofile_id = $this->MyProfile->find('first', array(
                            'conditions' => array(
                                'MyProfile.emp_code' => $this->request->data['Appraisals']['forwardlvl']
                            ),
                            'fields' => array('id')
                        ));
                        $newsave['Appraisers']['myprofile_id'] = $myprofile_id['MyProfile']['id'];
                        $this->Appraisers->create();
                        if ($this->Appraisers->save($newsave)) {
                            unset($newsave);
                        }
                        //New Ratings Records corresponding to the new Appraiser
                        $appraisalratings = $this->Appraisalratings->find('all', array(
                            'conditions' => array(
                                'Appraisalratings.appraiser_id' => $old_appraiser_id
                            ),
                            'order' => 'Appraisalratings.id ASC'
                        ));

                        foreach ($appraisalratings as &$appraisalrating) {
                            $appraisalrating['Appraisalratings']['id'] = null;
                            $appraisalrating['Appraisalratings']['appraiser_id'] = $this->Appraisers->id;
                            //The remarks will not be carry forwarded to the manager / appraiser
                            $appraisalrating['Appraisalratings']['remarks'] = '';
                            $appraisalrating = $appraisalrating['Appraisalratings'];
                        }
                        $this->Appraisalratings->saveAll($appraisalratings);

                        //New Comments Records corresponding to the new Appraiser
                        $newcomment = array();
                        $newcomment['appraiser_id'] = $this->Appraisers->id;
                        $newcomment['fac_comment'] = $this->data['Appraisalcomments']['fac_comment'];
                        $newcomment['commentt_conf'] = $this->data['Appraisalcomments']['commentt_conf'];
                        $newcomment['comment_training'] = $this->data['Appraisalcomments']['comment_training'];
                        ;
                        $newcomment['nu_performance'] = $this->data['Appraisalcomments']['nu_performance'];
                        $newcommnet['amt_inc_reason'] = $this->data['Appraisalcomments']['amt_inc_reason'];

                        $newcomment['amt_inc_standard'] = $this->data['Appraisalcomments']['amt_inc_standard'];

                        $this->Appraisalcomments->create();
                        if ($this->Appraisalcomments->save($newcomment)) {
                            unset($newcomment);
                        }
                    } else {

                        if ($isAppraisee || $isForwarded || $isRejected) {
                            $immediate_appraiser = $this->Appraisers->find('all', array(
                                'conditions' => array(
                                    'Appraisers.request_id' => $this->data['id'],
                                    'Appraisers.dt_appraise' => null,
                                    'Appraisers.peer_appraiser' => null,
                                ),
                                'order' => 'Appraisers.id ASC'
                            ));

                            if (count($immediate_appraiser) > 1) {

                                $ratings = array();
                                $comments = array();
                                $appraisalrating = array();
                                $ratings = $this->data['Appraisalratings'];

                                foreach ($immediate_appraiser as $appraiser) {
                                    $appraisalrating[] = $this->Appraisalratings->find('all', array(
                                        'conditions' => array(
                                            'Appraisalratings.appraiser_id' => $appraiser['Appraisers']['id']
                                        ),
                                        'order' => 'Appraisalratings.id ASC'
                                    ));
                                    // $appraisalrating[] = $appraisalratings;

                                    $appraisalcomments = $this->Appraisalcomments->find('first', array(
                                        'conditions' => array(
                                            'Appraisalcomments.appraiser_id' => $immediate_appraiser[0]['Appraisers']['id']
                                        )
                                    ));
                                    $comments[] = $appraisalcomments;
                                }

                                $i = 0;

                                foreach ($immediate_appraiser as $appraisers) {
                                    foreach ($ratings as $key => $appraisalratingData) {
                                        if ($key == 1) {
                                            $appraisalratingData['id'] = $appraisalrating[$i][$key - 1]['Appraisalratings']['id'];
                                            $this->Appraisalratings->saveAll($appraisalratingData);
                                        } else {
                                            $appraisalratingData['id'] = $appraisalrating[$i][$key - 1]['Appraisalratings']['id'];
                                            $this->Appraisalratings->saveAll($appraisalratingData);
                                        }
                                    }
                                    $i = $i + 1;
                                }
                            } else {

                                $appraisalratings = $this->Appraisalratings->find('all', array(
                                    'conditions' => array(
                                        'Appraisalratings.appraiser_id' => $immediate_appraiser[0]['Appraisers']['id']
                                    ),
                                    'order' => 'Appraisalratings.id ASC'
                                ));

                                $rating = $this->data['Appraisalratings'];

                                $appraisalratingData = array();
                                foreach ($rating as $key => $appraisalratingData) {

                                    $appraisalratingData['id'] = $appraisalratings[$key - 1]['Appraisalratings']['id'];
                                    $this->Appraisalratings->saveAll($appraisalratingData);
                                }


                                $appraisalcomments = $this->Appraisalcomments->find('first', array(
                                    'conditions' => array(
                                        'Appraisalcomments.appraiser_id' => $immediate_appraiser[0]['Appraisers']['id']
                                    )
                                ));
                                $comment = array();
                                $comment['id'] = $appraisalcomments['Appraisalcomments']['id'];
                                $comment['appraiser_id'] = $immediate_appraiser[0]['Appraisers']['id'];
                                $comment['fac_comment'] = $this->data['Appraisalcomments']['fac_comment'];
                                $comment['commentt_conf'] = $this->data['Appraisalcomments']['commentt_conf'];
                                $comment['nu_performance'] = $this->data['Appraisalcomments']['nu_performance'];
                                $comment['comment_training'] = $this->data['Appraisalcomments']['comment_training'];

                                $this->Appraisalcomments->save($comment);
                                unset($comment);
                            }
                            //Overwrite / Update Comments Records corresponding to the Immediate Appraiser
                        }
                        if ($isFinalAppraiser) {
                            $this->data['Appraisals']['ch_rating'] = $this->data['Appraisalcomments']['nu_performance'];
                        }
                    }
                }
                //Update status
                if ($isHR) {

                    $this->Appraisals->saveField('ch_status', 'COMPLETED');
                    $this->Appraisals->saveField('amt_inc', $this->data['Appraisals']['amt_inc'] + $this->data['Appraisals']['kraincamt']);
                    $date = date('Y-m-d');
                    $this->Appraisers->UpdateAll(array('Appraisers.dt_appraise' => "'.$date.'"), array('Appraisers.id' => $this->data['Appraisers']['id']));
                    /*                     * ***************************** SOC OF TRAINING MODULE  *********************************** */

                    /*
                     * * THIS BLOCK OF CODE FOR IDENTIFIED TRAININGS DURING THE ENTIRE APPRIASAL PROCCESS.
                     * *
                     * *SAVE ALL IDENTIFIED TRAININGS IN THE FORM OF TRAINING REQUEST AND PENDING AT TRAINING IN CHARGE 'S DESK.
                     * *
                     */

                    $trainee_code = $currentAppraisal['Appraisals']['emp_code'];
                    //$appraisal_id = $this->data['id'];
//                    $appriasal_data = $this->Appraisals->find('first', array(
//                        'conditions' => array(
//                            'Appraisals.id' => $appraisal_id,
//                            'Appraisals.emp_code' => $trainee_code,
//                            'Appraisals.ch_status' => 'HR'
//                        ),
//                        'fields' => array('Appraisals.app_Code')
//                            )
//                    );

                    $rep_to = $this->Auth->User('emp_code');

                    $tempdata = $this->TrainingRequest->find('first', array(
                        'conditions' => array(
                            'TrainingRequest.appraisal_id' => '1',
                            'TrainingRequest.trainee_code' => '492'
                        ),
                        'fields' => array(
                            'TrainingRequest.topic_type', 'TrainingRequest.training'
                        )
                            )
                    );

                    if (!empty($tempdata)) {


                        $topic_type = $tempdata['TrainingRequest']['topic_type'];

                        $training_names = explode(',', $tempdata['TrainingRequest']['training']);

                        foreach ($training_names as $tran) {

                            $mstData = array();

                            $dtData = array();

                            /*                             * **************** TO GET LAST TRAINING REQUEST ID ******************************************* */
                            $resultdata = $this->MstTrainingRequests->find('first', array('fields' => array('MstTrainingRequests.request_id'), 'order' => array('MstTrainingRequests.request_id DESC')));
                            $requestID = '';
                            if (!empty($resultdata)) {
                                $requestID = $resultdata['MstTrainingRequests']['request_id'] + 1;
                            } else {
                                $requestID = 1;
                            }

                            $training_name = '';
                            $topic_id = '';
                            if ($topic_type == 'E') {
                                $topic_id = $tran;
                            } else {
                                $training_name = $tran;
                            }

                            $mstData['MstTrainingRequests'] = array(
                                'request_id' => $requestID,
                                'comp_code' => $this->Auth->User('comp_code'),
                                'training_topic_type' => $topic_type,
                                'training_topic_id' => $topic_id,
                                'training_name' => $training_name,
                                'training_date' => date('d-M-Y'),
                                'date_created' => date('d-M-Y'),
                                'date_modified' => date('d-M-Y'),
                                'identified_from' => 'A',
                                'identified_by' => $rep_to,
                                'self_include' => 'N',
                                'approved_by' => $rep_to,
                                'training_status' => 'PENDING',
                                'request_status' => 'TI'
                            );


                            if ($this->MstTrainingRequests->save($mstData)) {
                                $date = date('Y-m-d');
                                $dtData['TrainingRegistrations'] = array(
                                    'request_id' => $requestID,
                                    'trainee_code' => $trainee_code,
                                    'type' => 'A',
                                    'manager' => $rep_to,
                                    'tr_status' => 'ALLOWED',
                                    'regis_date' => '$date',
                                    'approved_date' => '$date'
                                );
                                //print_r($dtData);die;	
                                $this->TrainingRegistrations->save($dtData);
                            }
                        }
                    }

                    /*                     * ***************************** EOC OF TRAINING MODULE  *********************************** */
                } else {

                    $level = $this->Appraisers->find('count', array('conditions' => array('request_id' => $this->data['id'])));
                    $appchecklvl = $this->WfMstAppMapLvl->find('first', array('fields' => array('wf_max_lvl'), 'conditions' => array('wf_app_id' => 4)));
                    $appchecklvl = $appchecklvl['WfMstAppMapLvl']['wf_max_lvl'];
                    $peer = $this->Appraisers->find('count', array('conditions' => array('request_id' => $this->data['id'], 'peer_appraiser' => 1)));
                    $countlvl = $level - $peer;

                    if ($peer == 0) {
                        if ($countlvl > $appchecklvl) {

                            $this->Appraisals->saveField('ch_status', 'HR');
                        } else {
                            $this->Appraisals->saveField('ch_status', 'APPRAISER');
                        }
                    } else {
                        if ($countlvl > $appchecklvl) {
                            $this->Appraisals->saveField('ch_status', 'HR');
                        } else {
                            $this->Appraisals->saveField('ch_status', 'APPRAISER');
                        }
                    }
                }

                $response->status = 1;
                $response->message = "Appraisal submitted successfully." . $email_error;
                $this->Session->setFlash($response->message, false);
            } else {
                $response->status = 0;
                if (isset($response->errors['Kras'])) {
                    $response->message = "The KRAs you entered have error. Kindly click on the 'Details' tab and rectify them.";
                } else {
                    $response->message = "Bad data received.";
                    if (!$hasNewKra)
                        $response->message = "Atleast one KRA must be entered. Click 'Details' tab and scroll to bottom.";
                }
            }
            /**
             * ************************************************************************
             * OUTPUT set output header, variable destruction, set layout, set view 
             * ************************************************************************
             */
            $this->layout = '';
            $this->autoRender = false;

            echo json_encode($response);
        } catch (Exception $e) {
            /**
             * ************************************************************************
             * OUTPUT ERROR set output header, variable destruction, set layout, set view
             * ************************************************************************
             */
            $response->status = 0;
            $response->message = "Error Occurred: Contact Administrator:" . $e->getMessage();
            $this->layout = '';
            $this->autoRender = '';
            header("HTTP/1.0 200 OK");
            header('Content-type: text/json; charset=utf-8');
            header("Cache-Control: no-cache, must-revalidate");
            header("Expires: Mon, 21 Oct 2011 10:30:00 IST");
            header("Pragma: no-cache");
            echo json_encode($response);
        }
    }

    function hrAmtChangeJson() {
        //print_r($this->data);die;
        $this->layout = "";
        $this->autoload = false;
        $appraisal_id = $this->data['Appraisals']['id'];
        $appraisee_id = $this->data['Appraisee']['emp_code_appraiser'];
        $inc_reason = $this->data['Appraisals']['amt_inc_reason'];
        $amt_inc = $this->data['Appraisals']['amt_inc'];
        $appraisee = $this->Appraisers->query("update app_appraisers set dt_appraise = NULL,from_hr = 1 WHERE request_id = $appraisal_id and emp_code_appraiser = $appraisee_id ");

        $appraiser_id = $this->Appraisers->find('first', array(
            'fields' => array('Appraisers.id'),
            'conditions' => array('Appraisers.request_id' => $this->data['Appraisals']['id'], 'Appraisers.emp_code_appraiser' => $this->data['Appraisee']['emp_code_appraiser'])
        ));
        $app_id = $appraiser_id['Appraisers']['id'];

        $comment = $this->Appraisalcomments->query("update app_comments set amt_inc_recommended = $amt_inc,amt_inc_reason='$inc_reason' where appraiser_id = $app_id");
    }

    function approvehr() {

        $response = new stdClass();
        $this->layout = "";
        $this->autoload = '';
        $req_id = $this->data['Appraisals']['id'];
        $emp_code = $this->data['Appraisee']['emp_code_appraiser'];
        $amt_inc = $this->data['Appraisals']['amt_inc'];

        $amt_inc_reason = $this->data['Appraisals']['amt_inc_reason'];
        $hr = $this->Appraisers->find('all', array('fields' => array('*'), 'conditions' => array('Appraisers.request_id' => $this->data['Appraisals']['id'])));
        $arraylen = count($hr);
        $hr_emp_code = $hr[$arraylen - 1]['Appraisers']['emp_code_appraiser'];
        $date = date('Y-m-d');
        $update_date = $this->Appraisers->query("update app_appraisers set dt_appraise = '$date' where request_id = $req_id and  emp_code_appraiser = $emp_code");
        $appraiser_id = $this->Appraisers->find('first', array(
            'fields' => array('Appraisers.id'),
            'conditions' => array('Appraisers.request_id' => $this->data['Appraisals']['id'], 'Appraisers.emp_code_appraiser' => $hr_emp_code)
        ));
        $app_id = $appraiser_id['Appraisers']['id'];

        $update_amt = $this->Appraisalcomments->query("update app_comments set amt_inc_standard = $amt_inc,amt_inc_reason= '$amt_inc_reason' where appraiser_id = $app_id");
        if ($update_date) {
            $response->status = 1;
            $response->message = "Request Submitted successfully";
            $this->autoRender = '';
            header("HTTP/1.0 200 OK");
            header('Content-type: text/json; charset=utf-8');
            header("Cache-Control: no-cache, must-revalidate");
            header("Expires: Mon, 21 Oct 2011 10:30:00 IST");
            header("Pragma: no-cache");
            echo json_encode($response);
        }
    }

    function rejecthr() {

        $hr = $this->Appraisers->find('all', array('fields' => array('*'), 'conditions' => array('Appraisers.request_id' => $this->data['Appraisals']['id'])));
        $arraylen = count($hr);
        $hr_emp_code = $hr[$arraylen - 1]['Appraisers']['emp_code_appraiser'];
        $date = date('Y-m-d');

        $amt_reject_reason = $this->data['Appraisals']['amt_reject_reason'];

        $emp_code = $this->data['Appraisals']['emp_code_appraiser'];
        $req_id = $this->data['Appraisals']['id'];
        $update_date = $this->Appraisers->query("update app_appraisers set dt_appraise= '$date' where request_id = $req_id and  emp_code_appraiser = $emp_code");
        $appraiser_id = $this->Appraisers->find('first', array(
            'fields' => array('Appraisers.id'),
            'conditions' => array('Appraisers.request_id' => $this->data['Appraisals']['id'], 'Appraisers.emp_code_appraiser' => $hr_emp_code)
        ));
        $app_id = $appraiser_id['Appraisers']['id'];

        $update_comment = $this->Appraisalcomments->query("update app_comments set amt_reject_reason = $amt_reject_reason where appraiser_id = $app_id ");
        $response = new stdClass();
        $this->layout = "";
        $this->autoload = '';

        if ($update_comment) {
            $response->status = 1;
            $response->message = "Request Submitted successfully";
            header("HTTP/1.0 200 OK");
            header('Content-type: text/json; charset=utf-8');
            header("Cache-Control: no-cache, must-revalidate");
            header("Expires: Mon, 21 Oct 2011 10:30:00 IST");
            header("Pragma: no-cache");
            echo json_encode($response);
        }
    }

    function prRejectEditJson() {
        try {
            $response = new stdClass();
            $email_error = '';
            $count = $this->Appraisals->find('count', array(
                'conditions' => array(
                    'Appraisals.id' => $this->data['Appraisals']['id']
                )
            ));
            $isValid = ($count != 0);
            /**
             * ************************************************************************
             * PROCESS 
             * ************************************************************************
             */
            //Save Appraiser
            //Add Ratings
            //Add Comments
            //$this->data['Appraisers']['dt_appraise'] = date('Y-m-d');
            if ($isValid) {
                //Update status
                //   $this->Appraisals->saveField('ch_status','REJECTED','review_reason',$this->data['Appraisals']['review_reason']);
                $save = array();
                $save['Appraisals']['id'] = $this->data['Appraisals']['id'];
                $save['Appraisals']['ch_status'] = 'REJECTED';
                $save['Appraisals']['review_reason'] = $this->data['Appraisals']['review_reason'];

                if ($this->Appraisals->save($save)) {
                    unset($save);
                }
                $last_submitted_appraisers = $this->Appraisers->find('first', array(
                    'conditions' => array(
                        'Appraisers.request_id' => $this->data['Appraisals']['id'],
                        'not' => array('Appraisers.dt_appraise' => null)
                    ),
                    'order' => 'Appraisers.id desc'
                ));
                //print_r($last_submitted_appraisers);die;
                $last_submitted_appraisers['Appraisers']['dt_appraise'] = null;
                $this->Appraisers->save($last_submitted_appraisers);
//                $forwarded_employee = $this->Employees->findByVcEmpIdMakess($last_submitted_appraisers['Appraisers']['vc_appraiser']);
//
//                //Send email to Forwarded Appraiser
//                $this->Email->to = $forwarded_employee['Employees']['vc_email'];
//
//                //Get HR Employee
//                $p = $this->Acl->Aco->findByAlias('prHrListHtml');
//                $l = $this->ArosAcos->findByAcoId($p['Aco']['id']);
//                $o = $this->Acl->Aro->findByParentId($l['ArosAcos']['aro_id']);
//                $hr = $this->Employees->findByVcEmpIdMakess($o['Aro']['foreign_key']);
//                $this->Email->cc = array($hr['Employees']['vc_email'], 'gaurav.malhotra@essindia.com');
//
//                $this->Email->subject = 'Rejected Appraisal';
//
//
//                $this->Email->sendAs = 'html';
//
//                //print_r($last_submitted_appraisers);die;
//                $this->set('name', $forwarded_employee['Employees']['vc_emp_name']);
//                $this->set('link', $this->webroot . 'appraisal/edit/' . $this->data['Appraisals']['id']);
//                $this->set('link_message', 'Click here to see the appraisal form.');
//                if (!$this->Email->send("Appraisal reviewed by you has been rejected. Kindly refill the values and re-submit.")) {
//                    $email_error = "But Email could not be sent.";
//                }
                $response->status = 1;
                $response->message = "Appraisal rejected successfully." . $email_error;
                $this->Session->setFlash($response->message, false);
            } else {
                $response->status = 0;
                $response->message = "Appraisal doesnot exist.";
            }
            /**
             * ************************************************************************
             * OUTPUT set output header, variable destruction, set layout, set view 
             * ************************************************************************
             */
            $this->layout = '';
            $this->autoRender = '';
            header("HTTP/1.0 200 OK");
            header('Content-type: text/json; charset=utf-8');
            header("Cache-Control: no-cache, must-revalidate");
            header("Expires: Mon, 21 Oct 2011 10:30:00 IST");
            header("Pragma: no-cache");
            echo json_encode($response);
        } catch (Exception $e) {
            /**
             * ************************************************************************
             * OUTPUT ERROR set output header, variable destruction, set layout, set view
             * ************************************************************************
             */
            $response->status = 0;
            $response->message = "Error Occurred: Contact Administrator:" . $e->getMessage();
            $this->layout = '';
            $this->autoRender = '';
            header("HTTP/1.0 200 OK");
            header('Content-type: text/json; charset=utf-8');
            header("Cache-Control: no-cache, must-revalidate");
            header("Expires: Mon, 21 Oct 2011 10:30:00 IST");
            header("Pragma: no-cache");
            echo json_encode($response);
        }
    }

    function factors() {
        $this->paginate = array(
            'fields' => array('*'),
            'limit' => 10,
            'order' => array('Appraisalfactors.id desc')
        );

//$this->paginate = $this->Appraisalfactors->find('all',array('order'=>array('Appraisalfactors.id'=>'desc')));
        $data = $this->paginate('Appraisalfactors');

        $this->layout = 'employee-new';
        $this->set('factors', $data);
    }

    function addfactors() {
        $this->layout = 'employee-new';

        $save = array();
        $save['factor_name'] = $this->request->data['Apprasialfactors']['factor_name'];
        $save['factor_type'] = $this->request->data['factor_type'];
        $save['department_id'] = $this->request->data['Apprasialfactors']['department_id'];
        $save['fac_status'] = 1;
        $department = $this->Department->find('list', array(
            'fields' => array('Department.id', 'Department.dept_name'),
            'conditions' => array(
                'comp_code' => '01')
        ));


        if ($this->request->is('post')) {


//$this->Post->create();
            $appfacid = $this->Appraisalfactors->save($save);
            if ($appfacid) {
                unset($save);
                $this->Session->setFlash(__('The post has been saved.'));
                return $this->redirect(array('action' => 'factors'));
            } else {
                $this->Session->setFlash(__('The post could not be saved. Please, try again.'));
            }
        }
        $this->set('departments', $department);
    }

    public function deactivatefactor($id) {
        $this->autoRender = false;
        $deactivatefactor = $this->Appraisalfactors->query("update app_factors set fac_status = 0 Where id = $id");
        //print_r($deactivatefactor);die;
        return $deactivatefactor;
    }

    public function activatefactor($id) {
        $this->autoRender = false;
        $activatefactor = $this->Appraisalfactors->query("update app_factors set fac_status = 1 Where id = $id");
        //print_r($deactivatefactor);die;
        return $activatefactor;
    }

    public function factorslistbydepartment() {
        $this->layout = 'employee-new';
        $emp_dept_id = $_SESSION['Auth']['MyProfile']['dept_code'];

        $department_id = $this->Department->find('first', array(
            'fields' => array('Department.id'),
            'conditions' => array('Department.dept_code' => $emp_dept_id),
        ));
        //print_r($department_id);die;
        $employees = $this->UserDetail->find('list', array(
            'fields' => array('emp_code', 'user_name'),
            'order' => 'user_name asc'
        ));
        // print_r($employees);die;


        $this->paginate = array(
            'fields' => array('*'),
            'limit' => 50,
            'conditions' => array('Appraisalfactors.department_id' => $department_id['Department']['id']),
            'order' => array('Appraisalfactors.id desc')
        );

//$this->paginate = $this->Appraisalfactors->find('all',array('order'=>array('Appraisalfactors.id'=>'desc')));
        $data = $this->paginate('Appraisalfactors');
        $this->set('factordept', $data);
        $this->set('data', $employees);
    }

    public function assignfactor($id) {
        $this->layout = '';
        $this->autoload = false;
        $this->set('factorid', $id);
    }

    public function appraisalfactorinfo($id, $myprofile_id) {

        $this->layout = '';
        $this->autoload = '';
        $save = array();
        $save['app_factors_id'] = $id;
        $save['myprofile_id'] = $myprofile_id;

        $appfacid = $this->AppraisalFactorsMapping->save($save);
        if ($appfacid) {
            unset($save);
            $this->Session->setFlash(__('This factor  has been assigned.'));
            return $this->redirect(array('action' => 'factors'));
        } else {
            $this->Session->setFlash(__('This factor could not be saved. Please, try again.'));
        }
    }

    public function slabsList() {

        $this->layout = 'employee-new';

        $slabs = $this->Appraisalslabs->find('all');

        $this->set('data', $slabs);
//$this->paginate = $this->Appraisalfactors->find('all',array('order'=>array('Appraisalfactors.id'=>'desc')));
    }

    public function addSlab() {
        $this->layout = 'employee-new';

        $comp_code = $this->Company->find('list', array(
            'fields' => array('Company.comp_code', 'Company.comp_name')
        ));

        if ($this->data) {
            $rating_exist = $this->Appraisalslabs->find('all', array(
                'fields' => array('*'),
                'conditions' => array('Appraisalslabs.comp_code' => $this->data['AppraisalSlabs']['Company'], 'Appraisalslabs.dept_code' => $this->data['department_name'], 'Appraisalslabs.desg_code' => $this->data['designation_name'], 'Appraisalslabs.rating_id' => $this->data['rating'])
            ));
            if ($rating_exist) {
                $this->Session->setFlash(__('This Slab  already exist.'));
            } else {
                $save = array();
                $save['comp_code'] = $this->data['AppraisalSlabs']['Company'];
                $save['desg_code '] = $this->data['designation_name'];
                $save['dept_code'] = $this->data['department_name'];
                $save['rating_id'] = $this->data['rating'];
                $save['amt_inc'] = $this->data['amt_inc'];
                $dept_id = $this->Departments->find('first', array(
                    'fields' => array('Departments.id'),
                    'conditions' => array('Departments.dept_code' => $this->data['department_name'])
                ));
                $save['department_id'] = $dept_id['Departments']['id'];
                $desg_id = $this->Designation->find('first', array(
                    'fields' => array('Designation.id'),
                    'conditions' => array('Designation.desg_code' => $this->data['designation_name'])
                ));
                $save['designation_id'] = $desg_id['Designation']['id'];
                $save['slab_category_id'] = 1;
                //print_r($save);die;
                $this->Appraisalslabs->create();
                if ($this->Appraisalslabs->save($save)) {
                    unset($save);
                    $this->Session->setFlash(__('This Slab saved.'));
                }
            }
        }
        $this->set('company', $comp_code);

        //$departmentList = $this->Departments->find('list',array(
        //'fields'=>array('Departments.dept_code','Departments.dept_name')));
    }

    public function appraisalslabdept($id) {
        $department = $this->Departments->find('list', array(
            'fields' => array('Departments.dept_code', 'Departments.dept_name'),
            'conditions' => array('Departments.comp_code' => $id)
        ));

        $this->set('dept', $department);
    }

    public function appraisalslabdesg($id) {
        $designation = $this->Designation->find('list', array(
            'fields' => array('Designation.desg_code', 'Designation.desc'),
            'conditions' => array('Designation.comp_code' => $id)
        ));

        $this->set('desg', $designation);
    }

    public function appraisalfactorconsolidatedinfo() {

        $this->layout = '';
        $this->autoRender = false;
        $employee = $_POST['employee'];

        $factors = $_POST['factors'];

        foreach ($employee as $emp) {
            $id = $this->MyProfile->find('first', array('fields' =>
                array('MyProfile.id'), 'conditions' => array('MyProfile.emp_code' => $emp)));
            foreach ($factors as $fac) {
                $save = array();
                $save['app_factors_id'] = $fac;
                $save['myprofile_id'] = $id['MyProfile']['id'];
                $this->AppraisalFactorsMapping->create();
                $saveinfo = $this->AppraisalFactorsMapping->save($save);
                if ($saveinfo) {
                    unset($save);
                    $this->Session->setFlash(__('This factor  has been assigned.'));
                } else {
                    $this->Session->setFlash(__('This factor could not be saved. Please, try again.'));
                }
            }
        }
    }

    public function view() {
        $this->layout = 'employee-new';
    }

    public function reject_hr() {
        $this->layout = '';
    }

    public function skipPeer($id) {


        $this->layout = '';

        $date = date('Y/m/d');
        $update_date = $this->Appraisers->query("update app_appraisers set dt_appraise= $date,skip_status = 1 where id = $id");

        $status = 1;



        $this->set('response', $status);
    }

}
